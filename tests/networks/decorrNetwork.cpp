#include "decorrNetwork.h"

static log4cxx::LoggerPtr logger = log4cxx::Logger::getLogger("Tst.DNW");

using namespace spikey2;

uint decorrNetwork::run()
{
	/* run network generated by decorrNetwork.py */
	// init chip
	boost::shared_ptr<SpikenetComm> bus =
	boost::shared_ptr<SC_Mem>(new SC_Mem()); // playback memory interface
	boost::shared_ptr<Spikenet> chip = boost::shared_ptr<Spikenet>(new Spikenet(bus, 0));
	boost::shared_ptr<Spikey> sp = boost::shared_ptr<Spikey>(new Spikey(chip));
	boost::shared_ptr<SC_Mem> mem(boost::dynamic_pointer_cast<SC_Mem>(chip->bus));
	boost::shared_ptr<SC_SlowCtrl> scl = mem->getSCTRL();

	// load config file
	std::string filenameConfig = "spikeyconfig_decorrnetwork.out";
	std::string filenameSpikeTrain = "spiketrain_decorrnetwork.in";
	SpikeTrain stIn, stOut;
	stIn.readFromFile(filenameSpikeTrain);
	// LOG4CXX_INFO(logger, "spiketrain in: " << stIn);
	boost::shared_ptr<SpikeyConfig> cfg(new SpikeyConfig(bus->hw_const));

	// config chip from file
	assert(cfg->readParam(filenameConfig));
	LOG4CXX_INFO(logger, "loading config file " + filenameConfig + "successful");
	sp->config(cfg);

	// clear bus and playback memory
	bus->Clear();
	mem->intClear();

	// run network
	sp->sendSpikeTrain(stIn);
	sp->Flush();
	sp->Run();
	sp->waitPbFinished();
	sp->recSpikeTrain(stOut);

	uint spikes_no = stOut.d.size();
	float temperature = scl->getTemp();

	LOG4CXX_INFO(logger, "Number of spikes: " << spikes_no << " / Temperature: " << temperature
	                                          << std::endl);

	return spikes_no;
}
